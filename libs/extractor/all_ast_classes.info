  # Base class for nodes in the grammar.
  abstract class ASTNode
  class Nop < ASTNode
  class Expressions < ASTNode
  class NilLiteral < ASTNode
  class BoolLiteral < ASTNode
  class NumberLiteral < ASTNode
  class CharLiteral < ASTNode
  class StringLiteral < ASTNode
  class StringInterpolation < ASTNode
  class SymbolLiteral < ASTNode
  class ArrayLiteral < ASTNode
  class HashLiteral < ASTNode
  class NamedTupleLiteral < ASTNode
  class RangeLiteral < ASTNode
  class RegexLiteral < ASTNode
  class TupleLiteral < ASTNode
  class Var < ASTNode
  class Block < ASTNode
  class Call < ASTNode
  class NamedArgument < ASTNode
  class If < ASTNode
  class Unless < ASTNode
  class Assign < ASTNode
  class OpAssign < ASTNode
  class MultiAssign < ASTNode
  class InstanceVar < ASTNode
  class ReadInstanceVar < ASTNode
  class ClassVar < ASTNode
  class Global < ASTNode
  abstract class BinaryOp < ASTNode
  class And < BinaryOp
  class Or < BinaryOp
  class Arg < ASTNode
  class ProcNotation < ASTNode
  class Def < ASTNode
  class Macro < ASTNode
  abstract class UnaryExpression < ASTNode
  class Not < UnaryExpression
  class PointerOf < UnaryExpression
  class SizeOf < UnaryExpression
  class InstanceSizeOf < UnaryExpression
  class Out < UnaryExpression
  class VisibilityModifier < ASTNode
  class IsA < ASTNode
  class RespondsTo < ASTNode
  class Require < ASTNode
  class When < ASTNode
  class Case < ASTNode
  class Select < ASTNode
  class ImplicitObj < ASTNode
  class Path < ASTNode
  #     'class' name [ '<' superclass ]
  class ClassDef < ASTNode
    property superclass : ASTNode?
    def initialize(@name, body = nil, @superclass = nil, @type_vars = nil, @abstract = false, @struct = false, @name_column_number = 0, @splat_index = nil)
  class ModuleDef < ASTNode
  class AnnotationDef < ASTNode
  class While < ASTNode
  class Until < ASTNode
  class Generic < ASTNode
  class TypeDeclaration < ASTNode
  class UninitializedVar < ASTNode
  class Rescue < ASTNode
  class ExceptionHandler < ASTNode
  class ProcLiteral < ASTNode
  class ProcPointer < ASTNode
  class Union < ASTNode
  class Self < ASTNode
  abstract class ControlExpression < ASTNode
  class Return < ControlExpression
  class Break < ControlExpression
  class Next < ControlExpression
  class Yield < ASTNode
  class Include < ASTNode
  class Extend < ASTNode
  class LibDef < ASTNode
  class FunDef < ASTNode
  class TypeDef < ASTNode
  class CStructOrUnionDef < ASTNode
  class EnumDef < ASTNode
  class ExternalVar < ASTNode
  class Alias < ASTNode
  class Metaclass < ASTNode
  class Cast < ASTNode
  class NilableCast < ASTNode
  class TypeOf < ASTNode
  class Annotation < ASTNode
  class MacroExpression < ASTNode
  class MacroLiteral < ASTNode
  class MacroVerbatim < UnaryExpression
  class MacroIf < ASTNode
  class MacroFor < ASTNode
  class MacroVar < ASTNode
  class Underscore < ASTNode
  class Splat < UnaryExpression
  class DoubleSplat < UnaryExpression
  class MagicConstant < ASTNode
  class Asm < ASTNode
  class AsmOperand < ASTNode
